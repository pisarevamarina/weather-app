{"version":3,"sources":["components/Card.js","components/Forecast.js","components/App.js","serviceWorker.js","index.js"],"names":["moment","require","locale","Card","newDate","Date","weekDay","this","props","day","dt","setTime","logoURL","weather","id","className","format","Math","round","main","temp","description","React","Component","Forecast","state","days","componentDidMount","fetch","then","res","json","data","dailyData","list","filter","reading","dt_txt","includes","setState","catch","err","console","log","formatCards","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gPACMA,EAASC,EAAQ,IACvBD,EAAOE,OAAO,M,IAEOC,E,uKAGjB,IAAIC,EAAU,IAAIC,KACZC,EAA8B,IAApBC,KAAKC,MAAMC,IAAIC,GAC/BN,EAAQO,QAAQL,GAEhB,IAAMM,EAAO,kBAAcL,KAAKC,MAAMC,IAAII,QAAQ,GAAGC,GAAxC,WAEb,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,cAAcf,EAAOI,GAASY,OAAO,SACnD,uBAAGD,UAAU,cAAcf,EAAOI,GAASY,OAAO,oBAClD,uBAAGD,UAAWH,IACd,4BAAKK,KAAKC,MAAMX,KAAKC,MAAMC,IAAIU,KAAKC,MAApC,UACA,yBAAKL,UAAU,aACb,4BAAQA,UAAU,kCACfR,KAAKC,MAAMC,IAAII,QAAQ,GAAGQ,oB,GAlBPC,IAAMC,WCDnBC,E,4MACrBC,MAAQ,CACJC,KAAM,I,EAGVC,kBAAoB,WAChBC,MAAM,gIACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAMC,EAAYD,EAAKE,KAAKC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,OAAOC,SAAS,eACtE,EAAKC,SAAS,CAACb,KAAMO,OACxBO,OAAM,SAACC,GACJC,QAAQC,IAAIF,O,EAGhBG,YAAc,WACV,OAAO,EAAKnB,MAAMC,KAAKmB,KAAI,SAACpC,EAAKqC,GAAN,OAAY,kBAAC,EAAD,CAAMrC,IAAKA,EAAKsC,IAAKD,Q,uDAI5D,OACI,yBAAK/B,UAAU,aACf,wBAAIA,UAAU,uBAAd,2HACN,wBAAIA,UAAU,wBAAd,8EACE,yBAAKA,UAAU,8BACZR,KAAKqC,oB,GAzBsBtB,IAAMC,WCS7ByB,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,QCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.72886d0d.chunk.js","sourcesContent":["import React from 'react';\nconst moment = require('moment')\nmoment.locale('ru');\n\nexport default class Card extends React.Component {\n  render() {\n    \n    let newDate = new Date();\n    const weekDay = this.props.day.dt * 1000\n    newDate.setTime(weekDay)\n\n    const logoURL = `owf owf-${this.props.day.weather[0].id} owf-5x`\n\n    return (\n      <div className='col-auto'>\n        <div className='card bg-light'>\n          <h3 className='card-title'>{moment(newDate).format('dddd')}</h3>\n          <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\n          <i className={logoURL}></i>\n          <h2>{Math.round(this.props.day.main.temp)} °C</h2>\n          <div className='card-body'>\n            <button className='btn btn-dark btn-outline-light'>\n              {this.props.day.weather[0].description}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Card from './Card'\n\nexport default class Forecast extends React.Component {\nstate = {\n    days: []\n}\n\ncomponentDidMount = () => {\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Rostov-on-Don&lang=ru&units=metric&APPID=5f125c81f099c4c9663f7b46c8e4d885\")\n    .then(res => res.json())\n    .then(data => {\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n        this.setState({days: dailyData})})\n    .catch((err) => {\n        console.log(err);\n      });\n}\n    formatCards = () => {\n        return this.state.days.map((day, i) => <Card day={day} key={i}/>)\n    }\n\n    render () {\n        return (\n            <div className=\"container\">\n            <h1 className=\"display-5 jumbotron\">Прогноз погоды на 5 дней</h1>\n      <h5 className=\"display-7 text-muted\">Ростов-на-Дону</h5>\n        <div className=\"row justify-content-center\">\n          {this.formatCards()}\n\n        </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}