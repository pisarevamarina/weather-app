{"version":3,"sources":["components/Card.js","components/Forecast.js","components/App.js","serviceWorker.js","index.js"],"names":["moment","updateLocale","russianLocale","Card","className","this","props","day","avgTemp","React","Component","Forecast","componentDidMount","fetch","then","res","json","data","newData","list","reduce","acc","item","dt_txt","split","push","main","temp","Math","round","cur","length","setState","days","renderCards","state","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAGAA,IAAOC,aAAa,KAAMC,K,IAELC,E,uKAGjB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eACd,uBAAGA,UAAU,cAAcC,KAAKC,MAAMC,IAAIA,KAE1C,4BAAKF,KAAKC,MAAMC,IAAIC,QAApB,UACA,yBAAKJ,UAAU,aACb,4BAAQA,UAAU,0C,GAXIK,IAAMC,WCFnBC,E,kDACnB,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAMRM,kBAAoB,WAClBC,MACE,gIAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAAUD,EAAKE,KAAKC,QAAO,SAACC,EAAKC,GACrC,IAAMf,EAAMe,EAAKC,OAAOC,MAAM,KAAK,GAMnC,OALKH,EAAId,KAEPc,EAAId,GAAO,IAEbc,EAAId,GAAKkB,KAAKH,EAAKI,KAAKC,MACjBN,IACN,IAEGM,EAAO,GACb,IAAK,IAAIL,KAAQJ,EAAS,CACxB,IAAMV,EAAUoB,KAAKC,MACnBX,EAAQI,GAAMF,QAAO,SAACC,EAAKS,GACzB,OAAOT,EAAMS,IACZ,GAAKZ,EAAQI,GAAMS,QAExBJ,EAAKF,KAAK,CACRlB,IAAKe,EACLd,QAASA,IAGb,EAAKwB,SAAS,CAAEC,KAAMN,QAnCT,EAsCnBO,YAAc,WACZ,OAAO,EAAKC,MAAMF,KAAKG,KAAI,SAAC7B,EAAK8B,GAAN,OAAY,kBAAC,EAAD,CAAM9B,IAAKA,EAAK+B,IAAKD,QArC5D,EAAKF,MAAQ,CACXF,KAAM,IAHS,E,qDA2CjB,OACE,yBAAK7B,UAAU,aACb,wBAAIA,UAAU,uBAAd,mFACA,wBAAIA,UAAU,wBAAd,8EACA,yBAAKA,UAAU,8BAA8BC,KAAK6B,oB,GAhDpBzB,IAAMC,WCS7B6B,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c66e81f3.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport russianLocale from \"moment/locale/ru\";\nmoment.updateLocale('ru', russianLocale);\n\nexport default class Card extends React.Component {\n  render() {\n    \n    return (\n      <div className='col-auto'>\n        <div className='card bg-light'>\n          <h3 className='card-title'>{}</h3>\n          <p className=\"text-muted\">{this.props.day.day}</p>\n\n          <h2>{this.props.day.avgTemp} °C</h2>\n          <div className='card-body'>\n            <button className='btn btn-dark btn-outline-light'>\n              {/* {this.props.day.weather[0].description} */}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Card from './Card';\n\nexport default class Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: [],\n    };\n  }\n\n  componentDidMount = () => {\n    fetch(\n      'https://api.openweathermap.org/data/2.5/forecast?q=Rostov-on-Don&lang=ru&units=metric&APPID=5f125c81f099c4c9663f7b46c8e4d885'\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const newData = data.list.reduce((acc, item) => {\n          const day = item.dt_txt.split(' ')[0]; // Дата как ключ\n          if (!acc[day]) {\n            // если у нас нет такого ключа, то создаем\n            acc[day] = [];\n          }\n          acc[day].push(item.main.temp); // добавляем температуру\n          return acc;\n        }, {});\n\n        const temp = [];\n        for (let item in newData) {\n          const avgTemp = Math.round(\n            newData[item].reduce((acc, cur) => {\n              return acc + cur;\n            }, 0) / newData[item].length\n          );\n          temp.push({\n            day: item,\n            avgTemp: avgTemp,\n          });\n        }\n        this.setState({ days: temp });\n      });\n  };\n  renderCards = () => {\n    return this.state.days.map((day, i) => <Card day={day} key={i} />);\n  };\n\n  render() {\n    return (\n      <div className='container'>\n        <h1 className='display-5 jumbotron'>Прогноз погоды</h1>\n        <h5 className='display-7 text-muted'>Ростов-на-Дону</h5>\n        <div className='row justify-content-center'>{this.renderCards()}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}