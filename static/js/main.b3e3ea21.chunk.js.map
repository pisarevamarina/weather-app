{"version":3,"sources":["components/Card.js","components/Forecast.js","components/App.js","serviceWorker.js","index.js"],"names":["moment","updateLocale","russianLocale","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Cards","props","classes","bull","className","icon","day","weather","weekDay","dt","newDate","Date","setTime","Card","CardContent","Typography","variant","component","format","color","gutterBottom","src","temp","CardActions","Button","size","description","Forecast","componentDidMount","fetch","then","res","json","data","dailyData","daily","setState","days","renderCards","state","map","i","key","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0WAwCAA,IAAOC,aAAa,KAAMC,KAE1B,IAAMC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,EAAMC,GAC5B,IAAMC,EAAUd,IACVe,EAAO,0BAAMC,UAAWF,EAAQV,QAAzB,UACPa,EAAI,2CAAuCJ,EAAMK,IAAIC,QAAQ,GAAGF,KAA5D,WACJG,EAAyB,IAAfP,EAAMK,IAAIG,GACtBC,EAAU,IAAIC,KAGlB,OAFAD,EAAQE,QAAQJ,GAGd,kBAACK,EAAA,EAAD,CAAMT,UAAWF,EAAQZ,MACvB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChCd,EACAlB,IAAOyB,GAASQ,OAAO,QACvBf,GAEH,kBAACY,EAAA,EAAD,CACEX,UAAWF,EAAQN,MACnBuB,MAAM,gBACNC,cAAY,GAEZnC,IAAOyB,GAASQ,OAAO,cAEzB,yBAAKG,IAAKhB,IACV,kBAACU,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnChB,EAAMK,IAAIgB,KAAKhB,IADlB,WAIF,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASxB,EAAMK,IAAIC,QAAQ,GAAGmB,e,ICnF9BC,E,kDACnB,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IAMR2B,kBAAoB,WAClBC,MACE,2KAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACR,IAAMC,EAAYD,EAAKE,MACvB,EAAKC,SAAS,CAACC,KAAMH,QAdL,EAiBnBI,YAAc,WACZ,OAAO,EAAKC,MAAMF,KAAKG,KAAI,SAAClC,EAAKmC,GAAN,OAAY,kBAACzC,EAAD,CAAOM,IAAKA,EAAKoC,IAAKD,QAhB7D,EAAKF,MAAQ,CACXF,KAAM,IAHS,E,qDAsBjB,OACE,yBAAKjC,UAAU,aACb,wBAAIA,UAAU,uBAAd,mFACA,wBAAIA,UAAU,wBAAd,8EACA,yBAAKA,UAAU,8BAA8BuC,KAAKL,oB,GA3BpBM,IAAMC,WCO7BC,MARf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,QCKc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3e3ea21.chunk.js","sourcesContent":["// // // import React from 'react';\n// import moment from 'moment';\n// // // import { Button } from '@material-ui/core';\n// import russianLocale from \"moment/locale/ru\";\n// moment.updateLocale('ru', russianLocale);\n\n// export default class Card extends React.Component {\n//   render() {\n\n// const ms = this.props.day.dt * 1000;\n// const weekdayName = new Date(ms).toLocaleString('ru', {weekday: 'long'});\n\n//     return (\n//       <div className='col-auto'>\n//         <div className='card bg-light'>\n//           <h3 className='card-title'>{}</h3>\n//           <p className=\"text-muted\">{weekdayName}</p>\n\n//           <h2>{this.props.day.temp.day} °C</h2>\n//           <div className='card-body'>\n//             <Button color=\"primary\">\n//               {this.props.day.weather[0].description}\n//             </Button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport russianLocale from \"moment/locale/ru\";\nimport moment from 'moment';\n\nmoment.updateLocale('ru', russianLocale);\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function Cards(props) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n  const icon = `http://openweathermap.org/img/wn/${props.day.weather[0].icon}@2x.png`\n  const weekDay = props.day.dt * 1000;\n  let newDate = new Date();\n  newDate.setTime(weekDay);\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant='h5' component='h2'>\n          {bull}\n          {moment(newDate).format('dddd')}\n          {bull}\n        </Typography>\n        <Typography\n          className={classes.title}\n          color='textSecondary'\n          gutterBottom\n        >\n         {moment(newDate).format(\"MMM Do YY\")}\n        </Typography>\n        <img src={icon}></img>\n        <Typography variant='body2' component='p'>\n          {props.day.temp.day} °C\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size='small'>{props.day.weather[0].description}</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Cards from './Card';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default class Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: [],\n    };\n  }\n\n  componentDidMount = () => {\n    fetch(\n      'https://api.openweathermap.org/data/2.5/onecall?lat=47.222531&lon=-39.718705&units=metric&lang=ru&exclude=hourly,minutely,alerts&appid=5f125c81f099c4c9663f7b46c8e4d885'\n    )\n      .then((res) => res.json())\n      .then((data) => {\n     const dailyData = data.daily\n     this.setState({days: dailyData})\n      });\n  };\n  renderCards = () => {\n    return this.state.days.map((day, i) => <Cards day={day} key={i} />);\n  };\n\n  render() {\n    return (\n      <div className='container'>\n        <h1 className='display-5 jumbotron'>Прогноз погоды</h1>\n        <h5 className='display-7 text-muted'>Ростов-на-Дону</h5>\n        <div className='row justify-content-center'>{this.renderCards()}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}