{"version":3,"sources":["components/Card.js","components/Forecast.js","components/App.js","serviceWorker.js","index.js"],"names":["moment","updateLocale","russianLocale","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Cards","props","classes","bull","className","icon","day","weather","weekDay","dt","newDate","Date","setTime","console","log","Grid","item","xs","Card","CardContent","Typography","variant","component","format","color","gutterBottom","src","Math","round","temp","CardActions","Button","size","description","theme","flexGrow","paper","height","width","control","padding","spacing","Forecast","React","useState","days","weatherData","setWeatherData","useEffect","a","fetch","then","res","json","data","dailyData","daily","fetchWeatherData","container","direction","justify","alignItems","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mXAYAA,IAAOC,aAAa,KAAMC,KAE1B,IAAMC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,EAAMC,GAC5B,IAAMC,EAAUd,IACVe,EAAO,0BAAMC,UAAWF,EAAQV,QAAzB,UACPa,EAAI,2CAAuCJ,EAAMK,IAAIC,QAAQ,GAAGF,KAA5D,WACJG,EAAyB,IAAfP,EAAMK,IAAIG,GACtBC,EAAU,IAAIC,KAKlB,OAJAD,EAAQE,QAAQJ,GAElBK,QAAQC,IAAIb,GAGR,kBAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAMd,UAAWF,EAAQZ,MACvB,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChCnB,EACAlB,IAAOyB,GAASa,OAAO,QACvBpB,GAEH,kBAACiB,EAAA,EAAD,CACEhB,UAAWF,EAAQN,MACnB4B,MAAM,gBACNC,cAAY,GAEXxC,IAAOyB,GAASa,OAAO,cAE1B,yBAAKG,IAAKrB,IACV,kBAACe,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnCK,KAAKC,MAAM3B,EAAMK,IAAIuB,KAAKvB,KAD7B,WAIF,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAS/B,EAAMK,IAAIC,QAAQ,GAAG0B,gBC1DnD,IAAM7C,EAAYC,aAAW,SAAC6C,GAAD,MAAY,CACvC5C,KAAM,CACJ6C,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAS,CACPC,QAASN,EAAMO,QAAQ,QAIZ,SAASC,IACtB,IAAMxC,EAAUd,IADiB,EAEKuD,IAAMC,SAAS,CAAEC,KAAM,KAF5B,mBAE1BC,EAF0B,KAEbC,EAFa,KAiBjC,OAbAJ,IAAMK,WAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACJC,MACjB,0KACAC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAHG,OACjBC,EADiB,OAIjBC,EAAYD,EAAKE,MACvBT,EAAe,CAACF,KAAMU,IALC,2CAAH,qDAQtBE,KACC,IAID,yBAAKrD,UAAU,aACb,wBAAIA,UAAU,kCAAd,mFACA,wBAAIA,UAAU,wBAAd,8EACA,kBAACW,EAAA,EAAD,CAAM2C,WAAS,EAAGC,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAASzD,UAAWF,EAAQZ,KAAMmD,QAAS,GACtGK,EAAYD,KAAKiB,KAAI,SAACxD,EAAKyD,GAAN,OAAY,kBAAC/D,EAAD,CAAOM,IAAKA,EAAK0D,IAAKD,SC5BjDE,MARf,WACE,OACE,yBAAK7D,UAAU,OACb,kBAACsC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.3948e734.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport russianLocale from 'moment/locale/ru';\nimport moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\n\n\nmoment.updateLocale('ru', russianLocale);\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function Cards(props) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n  const icon = `http://openweathermap.org/img/wn/${props.day.weather[0].icon}@2x.png`;\n  const weekDay = props.day.dt * 1000;\n  let newDate = new Date();\n  newDate.setTime(weekDay);\n\nconsole.log(props)\n\n  return (\n    <Grid item xs={6}>\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant='h5' component='h2'>\n          {bull}\n          {moment(newDate).format('dddd')}\n          {bull}\n        </Typography>\n        <Typography\n          className={classes.title}\n          color='textSecondary'\n          gutterBottom\n        >\n          {moment(newDate).format('MMM Do YY')}\n        </Typography>\n        <img src={icon}></img>\n        <Typography variant='body2' component='p'>\n          {Math.round(props.day.temp.day)} °C\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size='small'>{props.day.weather[0].description}</Button>\n      </CardActions>\n    </Card>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport Cards from './Card';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function Forecast() {\n  const classes = useStyles();\n  const [weatherData, setWeatherData] = React.useState({ days: [] });\n\n  React.useEffect(() => {\n    const fetchWeatherData = async () => {\n      const data = await fetch(\n        'https://api.openweathermap.org/data/2.5/onecall?lat=47.222531&lon=39.718705&units=metric&lang=ru&exclude=hourly,minutely,alerts&appid=5f125c81f099c4c9663f7b46c8e4d885'\n      ).then((res) => res.json());\n      const dailyData = data.daily;\n      setWeatherData({days: dailyData});\n      \n    }\n    fetchWeatherData()\n  }, []);\n\n\n  return (\n    <div className='container'>\n      <h1 className='display-5 jumbotron text-muted'>Прогноз погоды</h1>\n      <h5 className='display-7 text-muted'>Ростов-на-Дону</h5>\n      <Grid container   direction=\"row\" justify=\"center\" alignItems=\"center\" className={classes.root} spacing={2}>\n        {weatherData.days.map((day, i) => <Cards day={day} key={i} />)}\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}